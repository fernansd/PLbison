($1)[1]=(Inst)$4; /* valor inicial */
($1)[2]=(Inst)$6; /* valor final */
($1)[3]=(Inst)$8; /* paso entre cada iteracion */
($1)[4]=(Inst)$10; /* cuerpo del bucle */
($1)[5]=(Inst)$11; /* end */

void forcode()
{
  Datum d;
  Inst *savepc = pc;
  Symbol* variable = *((Symbol**)(savepc+6));
  printf("%s\n", (variable->nombre));
  printf("var for: %lf\n", variable->u.val);

  

  /* Inicializar variable del bucle */
  variable->u.val = ((Symbol *)*savepc)->u.val;
  printf("a1 dato: %lf\n", variable->u.val);
  double until_var = ((Symbol *)*(savepc+1))->u.val;
  printf("a2 until: %lf\n", until_var);
  double step = ((Symbol *)*(savepc+2))->u.val;
  printf("a3 step: %lf\n", step);

  while (variable->u.val != until_var) {
    execute(*((Inst **)(savepc+3)));
    variable->u.val += step;
  }

  /* Asignamos el pc a la posición de la siguiente instruccion */
  pc= *((Inst **)(savepc+4));
}

-----

void forcode()
{
  Datum d,d2,d3;
  Inst *savepc = pc;
  Symbol* variable = *((Symbol**)(savepc+6));
  printf("%s\n", (variable->nombre));
  printf("var for: %lf\n", variable->u.val);

  

  /* Inicializar variable del bucle */
  execute(*((Inst **)savepc));
  d = pop();
  variable->u.val = d.val;
  printf("a1 dato: %lf\n", variable->u.val);

  /* Valor de parada */
  execute(*((Inst **)(savepc+1)));
  d2 = pop();
  double until_var = d2.val;
  printf("a2 until: %lf\n", until_var);

  /* Paso entre iteraciones */
  execute(*((Inst **)(savepc+2)));
  d3 = pop();
  double step = d3.val;
  printf("a3 step: %lf\n", step);

  /* Ejecución del bucle */
  while (variable->u.val != until_var) {
    execute(*((Inst **)(savepc+3)));
    variable->u.val += step;
  }

  /* Asignamos el pc a la posición de la siguiente instruccion */
  pc= *((Inst **)(savepc+4));
}

^#       { 
    CLEAR_SCREEN; 
    LUGAR(10,10);
    IYELLOW;
    printf(">>>>>>> Fin del programa <<<<<<<\n");
    RESET;
    LUGAR(12,1);
    return 0;
  }

void forcode()
{
  Datum d;
  Inst *savepc = pc;
  Symbol* variable = (Symbol*)(savepc+5);
  printf("p: %p\n", variable);
  printf("var name: %s\n", (variable->nombre));
  printf("var value: %lf\n", variable->u.val);

double test = ((Symbol *)*(savepc))->u.val;
printf("test var: %lf\n", test);

  /* Inicializar variable del bucle */
  execute(*((Inst **)(savepc)));
  d = pop();
  printf("desde: %lf\n", d.val);
  variable->u.val = d.val;
  printf("a1 dato: %lf\n", variable->u.val);


test = ((Symbol *)*(savepc+1))->u.val;
printf("test var: %lf\n", test);
  /* Condición de parada */
  execute(*((Inst **)(savepc+1)));
  d = pop();
  double until_var = d.val;
  printf("hasta: %lf\n", until_var);


test = ((Symbol *)*(savepc+2))->u.val;
printf("test var: %lf\n", test);
  /* Paso dado entre iteraciones */
  execute(*((Inst **)(savepc+2)));
  d = pop();
  double step = d.val;
  printf("paso: %lf\n", step);

  while (variable->u.val != until_var) {
    execute(*((Inst **)(savepc+3)));
    variable->u.val += step;
  }

  /* Asignamos el pc a la posición de la siguiente instruccion */
  pc= *((Inst **)(savepc+4));
}